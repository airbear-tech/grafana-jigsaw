{"version":3,"sources":["../src/jigsaw_ctrl.js"],"names":["log","msg","L","heatLayer","moment","appEvents","MetricsPanelCtrl","panelDefaults","maxDataPoints","autoZoom","scrollWheelZoom","defaultLayer","lineColor","pointColor","JigsawCtrl","$scope","$injector","_","defaults","panel","layers","tileLayer","attribution","maxZoom","forcedOverlay","subdomains","timeSrv","get","coords","leafMap","polyline","hoverMarker","hoverTarget","setSizePromise","events","on","onInitialized","bind","onViewModeChanged","onInitEditMode","onPanelTeardown","onPanelSizeChanged","onDataReceived","onDataSnapshotLoad","onPanelHover","onPanelClear","render","addEditorTab","$timeout","cancel","evt","length","target","Math","floor","pos","x","addTo","min","max","idx","exact","timestamp","setLatLng","position","removeFrom","map","invalidateSize","enabled","disable","enable","hadMap","Boolean","setupMap","eachLayer","layer","addDataToMap","id","zoomSnap","zoomDelta","control","jigsaw","Array","circleMarker","latLng","color","fillColor","fillOpacity","weight","radius","mapBaseLayerChange","mapZoomToBox","e","overlay","options","setZIndex","zIndex","bounds","reduce","t","c","boxZoomBounds","contains","from","to","Infinity","isFinite","setTime","utc","zoomToFit","fitBounds","getBounds","setStyle","data","setView","lats","datapoints","lons","values","lat_min","lat_max","lon_min","lon_max","i","push","gridsquaresize_lat","gridsquaresize_lon","gridsquarehalfsize_lat","gridsquarehalfsize_lon","parseInt","dim_x","dim_y","getGridFromLatLon","gridsquaresize","lat","lon","grid_lat","grid_lon","getLatLonFromGrid","grid","values_grid","position_grid","grid_latlon","undefined","removeLayer","j","allvalues","sum","a","b","avg","latlngs","rectOptions","rectangle","snapshotData","templateUrl"],"mappings":"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","sourcesContent":["import L from './leaflet/leaflet.js';\nimport heatLayer from './leaflet/leaflet-heat.js';\n\nimport moment from 'moment';\n\nimport appEvents from 'app/core/app_events';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\n\nimport './leaflet/leaflet.css!';\nimport './partials/module.css!';\n\nconst panelDefaults = {\n  maxDataPoints: 500,\n  autoZoom: true,\n  scrollWheelZoom: false,\n  defaultLayer: 'OpenStreetMap',\n  lineColor: '#ffff',\n  pointColor: 'royalblue',\n}\n\nfunction log(msg) {\n  // uncomment for debugging\n  //console.log(msg);\n}\n\nexport class JigsawCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    log(\"constructor\");\n\n    _.defaults(this.panel, panelDefaults);\n\n    // Save layers globally in order to use them in options\n    this.layers = {\n      'OpenStreetMap': L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n        maxZoom: 19\n      }),\n      'OpenTopoMap': L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {\n        attribution: 'Map data: &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)',\n        maxZoom: 17\n      }),\n      'Satellite': L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n        attribution: 'Imagery &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community',\n        // This map doesn't have labels so we force a label-only layer on top of it\n        forcedOverlay: L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-labels/{z}/{x}/{y}.png', {\n          attribution: 'Labels by <a href=\"http://stamen.com\">Stamen Design</a>, <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a> &mdash; Map data &copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n          subdomains: 'abcd',\n          maxZoom: 20,\n        })\n      })\n    };\n\n    this.timeSrv = $injector.get('timeSrv');\n    this.coords = [];\n    this.leafMap = null;\n    this.polyline = null;\n    this.hoverMarker = null;\n    this.hoverTarget = null;\n    this.setSizePromise = null;\n\n    // Panel events\n    this.events.on('panel-initialized', this.onInitialized.bind(this));\n    this.events.on('view-mode-changed', this.onViewModeChanged.bind(this));\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('panel-size-changed', this.onPanelSizeChanged.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    // Global events\n    appEvents.on('graph-hover', this.onPanelHover.bind(this));\n    appEvents.on('graph-hover-clear', this.onPanelClear.bind(this));\n  }\n\n  onInitialized(){\n    log(\"onInitialized\");\n    this.render();\n  }\n\n  onInitEditMode() {\n    log(\"onInitEditMode\");\n    this.addEditorTab('Options', 'public/plugins/grafana-jigsaw-panel/partials/options.html', 2);\n  }\n\n  onPanelTeardown() {\n    log(\"onPanelTeardown\");\n    this.$timeout.cancel(this.setSizePromise);\n  }\n\n  onPanelHover(evt) {\n    log(\"onPanelHover\");\n    if (this.coords.length === 0) {\n      return;\n    }\n\n    // check if we are already showing the correct hoverMarker\n    let target = Math.floor(evt.pos.x);\n    if (this.hoverTarget && this.hoverTarget === target) {\n      return;\n    }\n\n    // check for initial show of the marker\n    if (this.hoverTarget == null){\n      this.hoverMarker.addTo(this.leafMap);\n    }\n\n    this.hoverTarget = target;\n\n    // Find the currently selected time and move the hoverMarker to it\n    // Note that an exact match isn't always going to work due to rounding so\n    // we clean that up later (still more efficient)\n    let min = 0;\n    let max = this.coords.length - 1;\n    let idx = null;\n    let exact = false;\n    while (min <= max) {\n      idx = Math.floor((max + min) / 2);\n      if (this.coords[idx].timestamp === this.hoverTarget) {\n        exact = true;\n        break;\n      }\n      else if (this.coords[idx].timestamp < this.hoverTarget) {\n        min = idx + 1;\n      }\n      else {\n        max = idx - 1;\n      }\n    }\n\n    // Correct the case where we are +1 index off\n    if (!exact && idx > 0 && this.coords[idx].timestamp > this.hoverTarget) {\n      idx--;\n    }\n    this.hoverMarker.setLatLng(this.coords[idx].position);\n  }\n\n  onPanelClear(evt) {\n    log(\"onPanelClear\");\n    // clear the highlighted circle\n    this.hoverTarget = null;\n    if (this.hoverMarker) {\n      this.hoverMarker.removeFrom(this.leafMap);\n    }\n  }\n\n  onViewModeChanged(){\n    log(\"onViewModeChanged\");\n    // KLUDGE: When the view mode is changed, panel resize events are not\n    //         emitted even if the panel was resized. Work around this by telling\n    //         the panel it's been resized whenever the view mode changes.\n    this.onPanelSizeChanged();\n  }\n\n  onPanelSizeChanged() {\n    log(\"onPanelSizeChanged\");\n    // KLUDGE: This event is fired too soon - we need to delay doing the actual\n    //         size invalidation until after the panel has actually been resized.\n    this.$timeout.cancel(this.setSizePromise);\n    let map = this.leafMap;\n    this.setSizePromise = this.$timeout(function(){\n      if (map) {\n        log(\"Invalidating map size\");\n        map.invalidateSize(true);\n      }}, 500\n    );\n  }\n\n  applyScrollZoom() {\n    let enabled = this.leafMap.scrollWheelZoom.enabled();\n    if (enabled != this.panel.scrollWheelZoom){\n      if (enabled){\n        this.leafMap.scrollWheelZoom.disable();\n      }\n      else{\n        this.leafMap.scrollWheelZoom.enable();\n      }\n    }\n  }\n\n  applyDefaultLayer() {\n    let hadMap = Boolean(this.leafMap);\n    this.setupMap();\n    // Only need to re-add layers if the map previously existed\n    if (hadMap){\n      this.leafMap.eachLayer((layer) => {\n        layer.removeFrom(this.leafMap);\n      });\n      this.layers[this.panel.defaultLayer].addTo(this.leafMap);\n    }\n    this.addDataToMap();\n  }\n\n  setupMap() {\n    log(\"setupMap\");\n    // Create the map or get it back in a clean state if it already exists\n    if (this.leafMap) {\n      if (this.polyline) {\n        this.polyline.removeFrom(this.leafMap);\n      }\n      this.onPanelClear();\n      return;\n    }\n\n    // Create the map\n    this.leafMap = L.map('jigsaw-' + this.panel.id, {\n      scrollWheelZoom: this.panel.scrollWheelZoom,\n      zoomSnap: 0.5,\n      zoomDelta: 1,\n    });\n\n    // Add layers to the control widget\n    L.control.layers(this.layers).addTo(this.leafMap);\n\n    // Add default layer to map\n    this.layers[this.panel.defaultLayer].addTo(this.leafMap);\n\n    // Initialize jigsaw array\n    this.jigsaw = Array();\n\n    // Hover marker\n    this.hoverMarker = L.circleMarker(L.latLng(0, 0), {\n      color: 'white',\n      fillColor: this.panel.pointColor,\n      fillOpacity: 1,\n      weight: 2,\n      radius: 7\n    });\n\n    // Events\n    this.leafMap.on('baselayerchange', this.mapBaseLayerChange.bind(this));\n    this.leafMap.on('boxzoomend', this.mapZoomToBox.bind(this));\n  }\n\n  mapBaseLayerChange(e) {\n    // If a tileLayer has a 'forcedOverlay' attribute, always enable/disable it\n    // along with the layer\n    if (this.leafMap.forcedOverlay) {\n      this.leafMap.forcedOverlay.removeFrom(this.leafMap);\n      this.leafMap.forcedOverlay = null;\n    }\n    let overlay = e.layer.options.forcedOverlay;\n    if (overlay) {\n      overlay.addTo(this.leafMap);\n      overlay.setZIndex(e.layer.options.zIndex + 1);\n      this.leafMap.forcedOverlay = overlay;\n    }\n  }\n\n  mapZoomToBox(e) {\n    log(\"mapZoomToBox\");\n    // Find time bounds of selected coordinates\n    const bounds = this.coords.reduce(\n      function(t, c) {\n        if (e.boxZoomBounds.contains(c.position)) {\n          t.from = Math.min(t.from, c.timestamp);\n          t.to = Math.max(t.to, c.timestamp);\n        }\n        return t;\n      },\n      {from: Infinity, to: -Infinity}\n    );\n\n    // Set the global time range\n    if (isFinite(bounds.from) && isFinite(bounds.to)) {\n      // KLUDGE: Create moment objects here to avoid a TypeError that\n      //         occurs when Grafana processes normal numbers\n      this.timeSrv.setTime({\n        from: moment.utc(bounds.from),\n        to: moment.utc(bounds.to)\n      });\n    }\n  }\n\n  // Add the circles and polyline to the map\n  addDataToMap() {\n    log(\"addDataToMap\");\n    this.polyline = L.polyline(\n      this.coords.map(x => x.position, this), {\n        color: this.panel.lineColor,\n        weight: 3,\n      }\n    ).addTo(this.leafMap);\n\n    this.zoomToFit();\n  }\n\n  zoomToFit(){\n    log(\"zoomToFit\");\n    if (this.panel.autoZoom && this.polyline){\n      this.leafMap.fitBounds(this.polyline.getBounds());\n    }\n    this.render();\n  }\n\n  refreshColors() {\n    log(\"refreshColors\");\n    if (this.polyline) {\n      this.polyline.setStyle({\n        color: this.panel.lineColor\n      });\n    }\n    if (this.hoverMarker){\n      this.hoverMarker.setStyle({\n        fillColor: this.panel.pointColor,\n      });\n    }\n    this.render();\n  }\n\n  onDataReceived(data) {\n    log(\"onDataReceived\");\n    this.setupMap();\n\n    if (data.length === 0) {\n      // No data or incorrect data, show a world map and abort\n      this.leafMap.setView([0, 0], 1);\n      return;\n    }\n\n    // Asumption is that there are an equal number of properly matched timestamps\n    // TODO: proper joining by timestamp?\n    this.coords.length = 0;\n    const lats = data[0].datapoints;\n    const lons = data[1].datapoints;\n    const values = data[2].datapoints;\n\n    // Get min/max lat/lon\n\n    var lat_min = lats[0][0];\n    var lat_max = lats[0][0];\n    var lon_min = lons[0][0];\n    var lon_max = lons[0][0];\n\n    for (let i = 0; i < lats.length; i++) {\n      if (lats[i][0] == null || lons[i][0] == null ||\n          lats[i][1] !== lons[i][1]) {\n        continue;\n      }\n\n      if (lat_min > lats[i][0]) lat_min = lats[i][0];\n      if (lat_max < lats[i][0]) lat_max = lats[i][0];\n      if (lon_min > lons[i][0]) lon_min = lons[i][0];\n      if (lon_max < lons[i][0]) lon_max = lons[i][0];\n\n      this.coords.push({\n        position: L.latLng(lats[i][0], lons[i][0]),\n        timestamp: lats[i][1]\n      });\n    }\n\n    // Build data grid and populate with average values\n\n    var gridsquaresize_lat = 0.0014;\n    var gridsquaresize_lon = 0.002;\n    var gridsquarehalfsize_lat = gridsquaresize_lat / 2;\n    var gridsquarehalfsize_lon = gridsquaresize_lon / 2;\n\n    lat_min = parseInt((lat_min - gridsquarehalfsize_lat) / gridsquaresize_lat) * gridsquaresize_lat;\n    lat_max = parseInt((lat_max + gridsquarehalfsize_lat) / gridsquaresize_lat) * gridsquaresize_lat;\n    lon_min = parseInt((lon_min - gridsquarehalfsize_lon) / gridsquaresize_lon) * gridsquaresize_lon;\n    lon_max = parseInt((lon_max + gridsquarehalfsize_lon) / gridsquaresize_lon) * gridsquaresize_lon;\n\n    var dim_x = parseInt((lat_max - lat_min) / gridsquaresize_lat) + 2;\n    var dim_y = parseInt((lon_max - lon_min) / gridsquaresize_lon) + 2;\n\n    // console.log(lat_min, lat_max, lon_min, lon_max);\n\n    function getGridFromLatLon(gridsquaresize, lat_min, lon_min, lat, lon)\n    {\n      var grid_lat = parseInt((lat - lat_min) / gridsquaresize.lat);\n      var grid_lon = parseInt((lon - lon_min) / gridsquaresize.lon);\n  \n      return {'grid_lat': grid_lat, 'grid_lon': grid_lon};\n    }\n\n    function getLatLonFromGrid(gridsquaresize, lat_min, lon_min, grid)\n    {\n      var lat = ((gridsquaresize.lat / 2) + lat_min + (grid.grid_lat * gridsquaresize.lat));\n      var lon = ((gridsquaresize.lon / 2) + lon_min + (grid.grid_lon * gridsquaresize.lon));\n\n      return {'lat': lat, 'lon': lon};\n    }\n\n    var values_grid = Array.from(Array(dim_x), () => new Array(dim_y));\n\n    for (var i = 0; i < lats.length; i++) {\n      var position_grid = getGridFromLatLon({'lat': gridsquaresize_lat, 'lon': gridsquaresize_lon}, lat_min, lon_min, lats[i][0], lons[i][0]);\n      var grid_latlon = getLatLonFromGrid({'lat': gridsquaresize_lat, 'lon': gridsquaresize_lon}, lat_min, lon_min, position_grid);\n\n      // console.log(position_grid.grid_lat, position_grid.grid_lon);\n\n      if (values_grid[position_grid.grid_lat][position_grid.grid_lon] === undefined)\n      {\n        values_grid[position_grid.grid_lat][position_grid.grid_lon] = Array();\n      }\n\n      values_grid[position_grid.grid_lat][position_grid.grid_lon].push(values[i][0]);\n\n      // L.marker([grid_latlon.lat, grid_latlon.lon]).addTo(this.leafMap);\n    }\n\n    for(var i = 0; i < this.jigsaw.length; i++)\n    {\n      this.leafMap.removeLayer(this.jigsaw[i]);\n    }\n\n    for(var i = 0; i < values_grid.length; i++)\n    {\n      for(var j = 0; j < values_grid[i].length; j++)\n      {\n        var allvalues = values_grid[i][j];\n\n        if (allvalues !== undefined)\n        {\n          var sum = allvalues.reduce(function(a, b) { return a + b; });\n          var avg = sum / allvalues.length;\n\n          var grid_latlon = getLatLonFromGrid({'lat': gridsquaresize_lat, 'lon': gridsquaresize_lon}, lat_min, lon_min, {'grid_lat': i, 'grid_lon': j});\n          grid_latlon.lat -= (gridsquaresize_lat / 2);\n          grid_latlon.lon -= (gridsquaresize_lon / 2);\n\n          // Only fill square if more than 4 values\n          if (allvalues.length > 4)\n          {\n            var latlngs = [[grid_latlon.lat, grid_latlon.lon], [grid_latlon.lat + gridsquaresize_lat, grid_latlon.lon + gridsquaresize_lon]];\n            var rectOptions = {color: 'red', fillOpacity: 0.8, weight: 0}\n            var rectangle = L.rectangle(latlngs, rectOptions).addTo(this.leafMap);\n            this.jigsaw.push(rectangle);\n          }\n        }\n      }\n    }\n    \n    this.addDataToMap();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    log(\"onSnapshotLoad\");\n    this.onDataReceived(snapshotData);\n  }\n}\n\nJigsawCtrl.templateUrl = 'partials/module.html';\n"],"file":"jigsaw_ctrl.js"}